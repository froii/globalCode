
// задача про підйом по сходах! 
// У нас є сходи висотою height і ми можемо підніматися на 1 до maxSteps сходинок за один крок.
// Треба знайти кількість різних способів дістатися нагору.

// Як це працює:

// Створюємо масив dp, де dp[i] - кількість способів дійти до i-ї сходинки
// База: dp[0] = 1 (один спосіб стояти на землі)
// Для кожної сходинки від 1 до height:

// Дивимося всі можливі кроки від 1 до maxSteps
// Додаємо кількість способів дійти до (поточна_висота - крок)

// Складність:

// Часова: O(height * maxSteps)
// Просторова: O(height)

// Де використовується:

// Робототехніка (планування руху)
// Ігри (генерація рівнів, AIPathfinding)
// Оптимізація мережевих маршрутів
// Аналіз послідовностей в біоінформатиці
// Фінансове моделювання (шляхи зміни цін)

export function staircaseTraversal(height: number, maxSteps: number): number {
    const dp: number[] = new Array(height + 1).fill(0);
    dp[0] = 1; // Base case: один спосіб досягти 0-ї сходинки
    
    // Для кожної сходинки
    for (let currentHeight = 1; currentHeight <= height; currentHeight++) {
      // Перебираємо всі можливі кроки
      for (let step = 1; step <= Math.min(maxSteps, currentHeight); step++) {
        dp[currentHeight] += dp[currentHeight - step];
      }
    }
    
    return dp[height];
  }

  
//   Є також рекурсивний підхід, але він менш ефективний через повторні обчислення. 
//   Динамічне програмування дозволяє нам зберігати проміжні результати і використовувати їх повторно.

staircaseTraversal(4, 2)  // Висота 4, можна йти на 1 або 2 сходинки
// dp[0] = 1
// dp[1] = dp[0] = 1
// dp[2] = dp[1] + dp[0] = 2
// dp[3] = dp[2] + dp[1] = 3
// dp[4] = dp[3] + dp[2] = 5
// Результат: 5 різних шляхів