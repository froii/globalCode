//   Powerset (множина всіх підмножин) використовується в багатьох практичних задачах

// генерація всіх можливих підмножин (powerset) з заданої множини!
// Для множини з n елементів, powerset матиме 2^n підмножин. Наприклад:

// Для [1] -> [[], [1]] (2^1 = 2 підмножини)
// Для [1,2] -> [[], [1], [2], [1,2]] (2^2 = 4 підмножини)
// Для [1,2,3] -> [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]] (2^3 = 8 підмножин)

// Часова складність: O(2^n), де n - кількість елементів
// Просторова складність: O(2^n)

export function powerset(array: number[]): number[][] {
    const subsets: number[][] = [[]];
    
    for (const elem of array) {
      const len = subsets.length;
      for (let i = 0; i < len; i++) {
        subsets.push([...subsets[i], elem]);
      }
    }
    
    return subsets;
  }


// Задачі оптимізації:
// Задача про рюкзак (Knapsack problem): треба вибрати найцінніші предмети, що поміщаються в рюкзак
// Розподіл ресурсів: знайти оптимальну комбінацію ресурсів для задачі
// Планування завдань: вибір оптимального набору завдань для виконання

// Аналіз даних:
// Feature Selection: вибір найкращої комбінації ознак для ML моделі
// Market Basket Analysis: аналіз комбінацій товарів, які купують разом
// A/B тестування: тестування різних комбінацій змін

// Теорія графів:
// Пошук всіх можливих шляхів
// Пошук підграфів
// Задачі покриття графа

// Криптографія:
// Аналіз можливих комбінацій ключів
// Атаки перебором

// Теорія множин і математична логіка:
// Булева алгебра
// Логічне програмування
// Доведення теорем