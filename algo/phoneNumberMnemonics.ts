// Функція phoneNumberMnemonics генерує всі можливі комбінації літер для номера телефону
// А, це задача генерації мнемонік для телефонного номера (як на старих телефонах з кнопками)!

// Алгоритм:
// Починаємо з пустого рядка: ['']
// Для кожної цифри в номері:
// Беремо всі поточні результати
// Для кожного результату додаємо всі можливі літери для поточної цифри
// Оновлюємо список результатів

// Де це використовується:
// T9 предиктивний текст на старих телефонах
// Системи автодоповнення
// Мнемонічні номери телефонів (наприклад, 1-800-FLOWERS)
// Головоломки і словесні ігри

// Часова складність: O(4^n), де n - довжина номера (4 тому що деякі кнопки мають 4 літери)
// Просторова складність: O(4^n) для зберігання всіх комбінацій


interface PhoneLookup {
    [key: string]: string[];
  }
  
  const lookup: PhoneLookup = {
    '0': ['0'],
    '1': ['1'],
    '2': ['a', 'b', 'c'],
    '3': ['d', 'e', 'f'],
    '4': ['g', 'h', 'i'],
    '5': ['j', 'k', 'l'],
    '6': ['m', 'n', 'o'],
    '7': ['p', 'q', 'r', 's'],
    '8': ['t', 'u', 'v'],
    '9': ['w', 'x', 'y', 'z']
  };
  
  function phoneNumberMnemonics(phoneNumber: string): string[] {
    let results: string[] = [''];
    
    for (const num of phoneNumber) {
      const nextResults: string[] = [];
      for (const existing of results) {
        for (const char of lookup[num]) {
          nextResults.push(existing + char);
        }
      }
      results = nextResults;
    }
    
    return results;
  }


  // Приклад:
phoneNumberMnemonics("23")  // для "2" можливі 'a','b','c', для "3" - 'd','e','f'
// Результат: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']