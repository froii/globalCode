
// А, це задача пошуку елементу в відсортованій матриці! 
// Тут ми можемо використати той факт, що матриця відсортована як по рядках, так і по стовпцях.

// Як це працює:
// Починаємо з правого верхнього кута матриці. Чому? Тому що:
// Всі елементи зліва будуть менші
// Всі елементи знизу будуть більші

// На кожному кроці:
// Якщо поточний елемент = target -> повертаємо його координати
// Якщо поточний елемент > target -> йдемо вліво (менші елементи)
// Якщо поточний елемент < target -> йдемо вниз (більші елементи)

// Пошук числа 8:
// Починаємо з 12 (0,3) -> 8 менше -> йдемо вліво
// 7 (0,2) -> 8 більше -> йдемо вниз
// 19 (1,2) -> 8 менше -> йдемо вліво
// 5 (1,1) -> 8 більше -> йдемо вниз
// 8 (2,1) -> знайшли!

// Переваги цього алгоритму:
// Не потрібно перевіряти всю матрицю
// На кожному кроці відкидаємо або рядок, або стовпець
// Легко реалізувати

// Часова: O(n + m), де n - кількість рядків, m - кількість стовпців
// Просторова: O(1) - використовуємо тільки кілька змінних

// Використання:
// Пошук в великих наборах даних
// Аналіз зображень
// Оптимізація баз даних
// Комп'ютерне бачення (коли дані організовані в матриці)

type Range = [number, number];

export function searchInSortedMatrix(matrix: number[][], target: number): Range {
  let row = 0;
  let col = matrix[0].length - 1;  // Починаємо з правого верхнього кута
  
  while (row < matrix.length && col >= 0) {
    const current = matrix[row][col];
    
    if (current === target) {
      return [row, col];  // Знайшли елемент
    }
    
    if (current > target) {
      col--;  // Елемент менший - йдемо вліво
    } else {
      row++;  // Елемент більший - йдемо вниз
    }
  }
  
  return [-1, -1];  // Елемент не знайдено
}

const matrix = [
    [1,  4,  7,  12],
    [2,  5,  19, 31],
    [3,  8,  24, 33],
    [40, 41, 42, 44]
  ];
  
  // Приклад 1: шукаємо 8
searchInSortedMatrix(matrix, 8);   // [2, 1]
// 12 -> 7 -> 19 -> 5 -> 8 (знайшли!)

// Приклад 2: шукаємо 31
searchInSortedMatrix(matrix, 31);  // [1, 3]
// 12 -> 31 (знайшли!)

// Приклад 3: шукаємо 40
searchInSortedMatrix(matrix, 40);  // [3, 0]
// 12 -> 31 -> 33 -> 44 -> 42 -> 41 -> 40 (знайшли!)

// Приклад 4: шукаємо 13 (якого немає в матриці)
searchInSortedMatrix(matrix, 13);  // [-1, -1]
// 12 -> 31 -> 19 -> 24 -> вийшли за межі (не знайшли)